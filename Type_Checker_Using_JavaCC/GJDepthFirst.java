//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   boolean debug = false;
   boolean Storage=true;
   HashMap<String,HashMap<String,String>> class_var = new HashMap<String,HashMap<String,String>>();
   HashMap<String,HashMap<String,HashMap<String,String>>> method_var = new HashMap<String,HashMap<String,HashMap<String,String>>>();
   HashMap<String,HashMap<String,LinkedHashMap<String,String>>> method_arg = new HashMap<String,HashMap<String,LinkedHashMap<String,String>>>();
   HashMap<String,String> extend_mapping = new HashMap<String,String>();
   Vector<String> messagesend_arguments = new Vector<String>();

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      // System.out.println("\nCLASS_VAR\n");
      // System.out.println(class_var);
      // System.out.println("\nMETHOD_VAR\n");
      // System.out.println(method_var);
      // System.out.println("\nMETHOD_ARG\n");
      // System.out.println(method_arg);
      // System.out.println("\nEXTENdS\n");
      // System.out.println(extend_mapping);

      Storage = false;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         String class_name = (String)n.f1.accept(this, argu);

         HashMap<String,String> main_class_var = new HashMap<String,String>();
         class_var.put(class_name,main_class_var);

         HashMap<String,HashMap<String,String>> main_method_var = new HashMap<String,HashMap<String,String>>();
         method_var.put(class_name,main_method_var);

         HashMap<String,LinkedHashMap<String,String>> main_method_arg = new HashMap<String,LinkedHashMap<String,String>>();
         method_arg.put(class_name,main_method_arg);

         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
         String class_name = (String)n.f1.accept(this, argu);
         
         if(class_var.containsKey(class_name))
         {
            System.out.println("Type error");
            System.exit(0);
         }

         Vector<String> class_arg = new Vector<String>();
         class_arg.add("class");
         class_arg.add(class_name);

         HashMap<String,String> var_declaration = new HashMap<String,String>();
         class_var.put(class_name,var_declaration);

         HashMap<String,HashMap<String,String>> method_var_declaration = new HashMap<String,HashMap<String,String>>();
         method_var.put(class_name,method_var_declaration);
         
         HashMap<String,LinkedHashMap<String,String>> method_arg_declaration = new HashMap<String,LinkedHashMap<String,String>>();
         method_arg.put(class_name,method_arg_declaration);
         
         n.f2.accept(this, argu);
         n.f3.accept(this, (A)class_arg);
         n.f4.accept(this, (A)class_arg);
         n.f5.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         String class_name = (String)n.f1.accept(this, argu);
         Vector<String>class_arg = new Vector<String>();
         class_arg.add("class");
         class_arg.add(class_name);
         n.f2.accept(this, argu);
         n.f3.accept(this, (A)class_arg);
         if(debug)
         {
            System.out.println("var declaration done");
         }
         n.f4.accept(this, (A)class_arg);
         if(debug)
         {
            System.out.println("mthod declaration done");
         }
         n.f5.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         String class_name = (String)n.f1.accept(this, argu);
         
         if(class_var.containsKey(class_name))
         {
            //System.out.println("Class already exists");
            System.out.println("Type error");
            System.exit(0);
         }

         HashMap<String,String> var_declaration = new HashMap<String,String>();
         class_var.put(class_name,var_declaration);

         HashMap<String,HashMap<String,String>> method_var_declaration = new HashMap<String,HashMap<String,String>>();
         method_var.put(class_name,method_var_declaration);
         
         HashMap<String,LinkedHashMap<String,String>> method_arg_declaration = new HashMap<String,LinkedHashMap<String,String>>();
         method_arg.put(class_name,method_arg_declaration);

         n.f2.accept(this, argu);
         String parent_name = (String)n.f3.accept(this, argu);
         extend_mapping.put(class_name,parent_name);

         Vector<String>class_method = new Vector<String>();
         class_method.add("class");
         class_method.add(class_name);
         
         n.f4.accept(this, argu);
         n.f5.accept(this, (A)class_method);
         if(debug)
         {
            System.out.println("var declaration done in  class extends");
         }
         n.f6.accept(this, (A)class_method);
         if(debug)
         {
            System.out.println("method declaration done in  class extends");
         }
         n.f7.accept(this, argu);
         if(debug)
         {
            System.out.println("storage in class extends done");
         }
      }
      else
      {
         n.f0.accept(this, argu);
         String class_name = (String)n.f1.accept(this, argu);
         Vector<String>class_arg = new Vector<String>();
         class_arg.add("class");
         class_arg.add(class_name);
         n.f2.accept(this, argu);
         String parent_class_name = (String)n.f3.accept(this,argu);
         if(extend_mapping.get(class_name) == null)
         {
            System.out.println("Symbol not found");
         }
         //n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, (A)class_arg);
         if(debug)
         {
            System.out.println("var decla done case type checking in extends declaration");
         }
         n.f6.accept(this, (A)class_arg);
         if(debug)
         {
            System.out.println("method decla done case type checking in extends declaration");
         }
         n.f7.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;

      if(Storage)
      {   
         String type = (String)n.f0.accept(this, argu);
         String id_name = (String)n.f1.accept(this, argu);
         Vector<String>class_method = (Vector<String>)argu;
         if(class_method.get(0) == "class")
         {
            String present_class_name = class_method.get(1);
            if(class_var.containsKey(present_class_name))
            {
               if(class_var.get(present_class_name).containsKey(id_name))
               {
                  System.out.println("Type error");
                  System.exit(0);
               }
               else
               {
                  class_var.get(present_class_name).put(id_name,type);
               }
            }
            else
            {
               System.out.println("Symbol not found");
               System.exit(0);
            }
         }
         else
         {
            if(class_var.containsKey(class_method.get(0)))
            {
               if(class_var.get(class_method.get(0)).containsKey(id_name))
               {
                  if(class_var.get(class_method.get(0)).get(id_name) != type)
                  {
                     System.out.println("Type error");
                     System.exit(0);
                  }
               }
               else
               {
                  if(method_var.get(class_method.get(0)).containsKey(class_method.get(1)))
                  {
                     if(method_var.get(class_method.get(0)).get(class_method.get(1)).containsKey(id_name))
                     {
                        //System.out.println("Variable already exists in var declaration of method");
                        System.out.println("Type error");
                        System.exit(0);
                     }
                     else
                     {
                        method_var.get(class_method.get(0)).get(class_method.get(1)).put(id_name,type);
                     }
                  }
                  else
                  {
                     //System.out.println("Method not declared in var declataion in class");
                     System.out.println("Symbol not found");
                     System.exit(0);
                  }
               }
            }
            else
            {
               System.out.println("Symbol not found");
               System.exit(0);
            }
            n.f2.accept(this, argu);
         }
      }
      else
      {
         String type = (String)n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         if(type == "int" || type == "boolean" || type == "int[]")
         {
            return _ret;
         }

         if(class_var.containsKey(type))
         {
            return _ret;
         }

         //System.out.println("class Type not declared in var declaration");
         System.out.println("Symbol not found");
         System.exit(0);

         n.f2.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         Vector<String> arguments = (Vector<String>)argu;
         String class_name = (String)arguments.get(1);
         if(debug)
         {
            System.out.println("class name is : "+class_name + " in method declaration");
         }

         String method_name = (String)n.f2.accept(this, argu);

         if(debug)
         {
            System.out.println("method name is : "+method_name + " in method declaration");
         }

         //checking whether method is already present or not
         if(method_var.get(class_name).containsKey(method_name))
         {
            //System.out.println("Method already exists");
            System.out.println("Type error");
            System.exit(0);
         }

         //for var declaration in method declaration
         HashMap<String,String> var_declaration = new HashMap<String,String>();
         method_var.get(class_name).put(method_name,var_declaration);

         String return_type = (String)n.f1.accept(this, argu);
         method_var.get(class_name).get(method_name).put("return",return_type);

         //for storing arguments in method declaration
         LinkedHashMap<String,String> method_arguments = new LinkedHashMap<String,String>();
         method_arg.get(class_name).put(method_name,method_arguments);

         Vector<String> class_method = new Vector<String>();
         class_method.add(class_name);
         class_method.add(method_name);

         if(debug)
         {
            System.out.println("updated class method is :");
            System.out.println(class_method);
         }

         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, (A)class_method);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, (A)class_method);
         n.f8.accept(this, (A)class_method);
         n.f9.accept(this, argu);
         n.f10.accept(this, (A)class_method);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
      }
      else
      {
         if(debug)
         {
            System.out.println("in method declaration");
         }
         n.f0.accept(this, argu);
         String return_type = (String)n.f1.accept(this,argu);
         //n.f1.accept(this, argu);
         Vector<String> arguments = (Vector<String>)argu;
         String class_name = (String)arguments.get(1);
         String method_name = (String)n.f2.accept(this, argu);
         if(debug)
         {
            System.out.println("class name is : "+class_name + " and method name is : " +method_name+" in method declaration");
         }
         String parent_class = extend_mapping.get(class_name);
         // if(parent_class == null)
         // {
         //    System.out.println("Symbol Not Found");
         //    System.exit(0);
         // }
         while(parent_class != null)
         {
            if(method_var.containsKey(parent_class))
            {
               if(method_var.get(parent_class).containsKey(method_name))
               {
                  Vector<String> child_arg = new Vector<>(method_arg.get(class_name).get(method_name).values());
                  Vector<String> parent_arg = new Vector<>(method_arg.get(parent_class).get(method_name).values());
                  if(!child_arg.equals(parent_arg))
                  {
                     System.out.println("Type error");
                     System.exit(0);
                  }
               }
            }
            else
            {
               System.out.println("Symbol not found");
               System.exit(0);
            }
            parent_class = extend_mapping.get(parent_class);
         }

         
         if(debug)
         {
            System.out.println("return type is : "+return_type);
         }
         n.f3.accept(this, argu);

         Vector<String> class_method = new Vector<String>();
         class_method.add(class_name);
         class_method.add(method_name);

         n.f4.accept(this, (A)class_method);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, (A)class_method);
         n.f8.accept(this, (A)class_method);
         n.f9.accept(this, argu);
         String expr_type = (String)n.f10.accept(this, (A)class_method);
         if(return_type == "int" || return_type == "int[]" || return_type == "boolean")
         {
            if(expr_type != return_type)
            {
               System.out.println("Type error");
               System.exit(0);
            }
         }
         else
         {
            String return_class_name = return_type;
            Vector<String>returns_can_be  = new Vector<String>();
            returns_can_be.add(return_class_name);
            for(Map.Entry<String,String> entry : extend_mapping.entrySet())
            {
               if(entry.getValue() == return_class_name)
               {
                  returns_can_be.add(entry.getKey());
               }
            }
            if(!returns_can_be.contains(expr_type))
            {
               System.out.println("Type error");
               System.exit(0);
            }
         }
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;

      if(Storage)
      {
         String type = (String)n.f0.accept(this, argu);
         String id_name = (String)n.f1.accept(this, argu);

         Vector<String> class_method = (Vector<String>)argu;

         //only one case for formal parameter
         String class_name = class_method.get(0);
         String method_name = class_method.get(1);

         //checking formal argu with the var declaration of method declearition
         for(Map.Entry<String,String> method_decl : method_var.get(class_name).get(method_name).entrySet())
         {
            String innerkey = method_decl.getKey();
            if(innerkey == id_name)
            {
               //System.out.println("Variable already exists in var declaration of Method Declaration");
               System.out.println("Type error");
               System.exit(0);
            }
         }

         //checking formal argu with the argu declaration of method declearition
         for(Map.Entry<String,String> method_arguments : method_arg.get(class_name).get(method_name).entrySet())
         {
            String innerkey = method_arguments.getKey();
            if(innerkey == id_name)
            {
               //System.out.println("Variable already exists in the argument list of method declaration");
               System.out.println("Type error");
               System.exit(0);
            }
         }
         method_arg.get(class_name).get(method_name).put(id_name,type);
      }
      else
      {
         String type = (String)n.f0.accept(this, argu);
         
         if(type == "int" || type == "boolean" || type == "int[]")
         {
            _ret = (R)type;
            return _ret;
         }

         if(class_var.containsKey(type))
         {
            _ret = (R)type;
            return _ret;
         }

         //System.out.println("class Type not declared in formal parameter");
         System.out.println("Symbol not found");
         System.exit(0);

         n.f1.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;

      if(Storage)
      {
         String type = (String)n.f0.accept(this, argu);
         _ret = (R)type;  
      }
      else
      {
         String type = (String)n.f0.accept(this, argu);

         if(type == "int" || type == "int[]" || type == "boolean")
         {
            _ret = (R)type;
            return _ret;
         }

         if(class_var.containsKey(type))
         {
            _ret = (R)type;
            return _ret;
         }
         
         //System.out.println("error in type");
         System.out.println("Symbol not found");
         System.exit(0);
      }

      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      if(Storage)
      {
         String type = "int[]";
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         _ret = (R)type;
      }
      else
      {
         String type = "int[]";
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         _ret = (R)type;
      }
      
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      if(Storage)
      {
         String type = "boolean";
         n.f0.accept(this, argu);
         _ret = (R)type;
      }
      else
      {
         String type = "boolean";
         n.f0.accept(this, argu);
         _ret = (R)type;
      }
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      if(Storage)
      {
         String type = "int";
         n.f0.accept(this, argu);
         _ret = (R)type;
      }
      else
      {
         String type = "int";
         n.f0.accept(this, argu);
         _ret = (R)type;
      }
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      else
      {
         String id_name = (String)n.f0.accept(this, argu);
         String type = "";

         Vector<String>class_method = (Vector<String>)argu;
         if(class_var.containsKey(class_method.get(0)))
         {
            type = class_var.get(class_method.get(0)).get(id_name);
         }
         if(type == null && method_var.get(class_method.get(0)).containsKey(class_method.get(1)))
         {
            type = method_var.get(class_method.get(0)).get(class_method.get(1)).get(id_name);
         }
         if(type == null && method_arg.get(class_method.get(0)).containsKey(class_method.get(1)))
         {
            type = method_arg.get(class_method.get(0)).get(class_method.get(1)).get(id_name);
         }
         if(type == null) //variable not declared in its class checking in parent classes
         {
            String parent_class = extend_mapping.get(class_method.get(0));
            while(parent_class != null)
            {
               if(class_var.containsKey(parent_class))
               {
                  if(class_var.get(parent_class).containsKey(id_name))
                  {
                     type = class_var.get(parent_class).get(id_name);
                     break;
                  }
               }
               else
               {
                  System.out.println("Symbol not found");
                  System.exit(0);
               }
               parent_class = extend_mapping.get(parent_class);
            }
         }    

         n.f1.accept(this, argu);
         String type_expr = (String)n.f2.accept(this, argu);

         if(type == null)
         {
            //_ret = (R)type;
            System.out.println("Symbol not found");
            System.exit(0);
         }
         else if(type == "int" || type == "int[]" || type == "boolean")
         {
            if(type != type_expr)
            {
               System.out.println("Type error");
               System.exit(0);
            }
         }
         else
         {
            Vector<String>lefts_can_be  = new Vector<String>();
            lefts_can_be.add(type);
            for(Map.Entry<String,String> entry : extend_mapping.entrySet())
            {
               if(entry.getValue() == type)
               {
                  lefts_can_be.add(entry.getKey());
               }
            }
            if(!lefts_can_be.contains(type_expr))
            {
               System.out.println("Type error");
               System.exit(0);
            }
         }
         n.f3.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
      }
      else
      {
         //example a[3] = 5;
         Vector<String>class_method = (Vector<String>)argu;
         String id_name =  (String)n.f0.accept(this, argu);
         String type = "";

         if(class_var.containsKey(class_method.get(0)))
         {
            type = class_var.get(class_method.get(0)).get(id_name);
         }
         if(type == null && method_var.get(class_method.get(0)).containsKey(class_method.get(1)))
         {
            type = method_var.get(class_method.get(0)).get(class_method.get(1)).get(id_name);
         }
         if(type == null && method_arg.get(class_method.get(0)).containsKey(class_method.get(1)))
         {
            type = method_arg.get(class_method.get(0)).get(class_method.get(1)).get(id_name);
         }
         if(type == null)
         {
            String parent_class = extend_mapping.get(class_method.get(0));
            while(parent_class != null)
            {
               if(class_var.containsKey(parent_class))
               {
                  if(class_var.get(parent_class).containsKey(id_name))
                  {
                     type = class_var.get(parent_class).get(id_name);
                     break;
                  }
               }
               else
               {
                  System.out.println("Symbol not found");
                  System.exit(0);
               }
               parent_class = extend_mapping.get(parent_class);
            }
         }  

         if(type != "int[]")
         {
            System.out.println("Type error");
            System.exit(0);
         }

         n.f1.accept(this, argu);
         String expr_id1 = (String)n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         String expr_id2 = (String)n.f5.accept(this, argu);

         if(expr_id1 != "int" || expr_id2 != "int")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         
         n.f6.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);

         String type = (String)n.f2.accept(this, argu);

         if(type != "boolean")
         {
            //System.out.println("in ifthenstatement type is not boolean");
            System.out.println("Type error");
            System.exit(0);
         }
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String type = (String)n.f2.accept(this, argu);

         if(type != "boolean")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);

         String type = (String)n.f2.accept(this, argu);
         if(type != "boolean")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoStatement n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);

         String type = (String)n.f4.accept(this, argu);

         if(type != "boolean")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);

         String type = (String)n.f2.accept(this, argu);

         if(type != "int")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = (R)n.f0.accept(this, argu);
      //n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         String type1 = (String)n.f0.accept(this, argu);
         String type2 = (String)n.f2.accept(this, argu);
         n.f1.accept(this, argu);
         if(type1 == "boolean" && type2 == "boolean")
         {
            String type = "boolean";
            _ret = (R)type;
         }
         else
         {
            System.out.println("Type error");
            System.exit(0);
         }
         
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         String type1 = (String)n.f0.accept(this, argu);
         String type2 = (String)n.f2.accept(this, argu);
         n.f1.accept(this, argu);
         if(type1 == "boolean" && type2 == "boolean")
         {
            String type = "boolean";
            _ret = (R)type;
         }
         else
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         String type1 = (String)n.f0.accept(this, argu);
         String type2 = (String)n.f2.accept(this, argu);
         n.f1.accept(this, argu);
         if(type1 == "int" && type2 == "int")
         {
            String type = "boolean";
            _ret = (R)type;
         }
         else
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         String type1 = (String)n.f0.accept(this, argu);
         String type2 = (String)n.f2.accept(this, argu);

         if(type1 == type2)
         {
            String type = "boolean";
            _ret = (R)type;
         }
         else
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }  
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(AddExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         String type1 = (String)n.f0.accept(this, argu);
         String type2 = (String)n.f2.accept(this, argu);
         n.f1.accept(this, argu);
         if(type1 == "int" && type2 == "int")
         {
            String type = "int";
            _ret = (R)type;
         }
         else
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         String type1 = (String)n.f0.accept(this, argu);
         String type2 = (String)n.f2.accept(this, argu);
         n.f1.accept(this, argu);
         if(type1 == "int" && type2 == "int")
         {
            String type = "int";
            _ret = (R)type;
         }
         else
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         String type1 = (String)n.f0.accept(this, argu);
         String type2 = (String)n.f2.accept(this, argu);
         n.f1.accept(this, argu);
         if(type1 == "int" && type2 == "int")
         {
            String type = "int";
            _ret = (R)type;
         }
         else
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         String type1 = (String)n.f0.accept(this, argu);
         String type2 = (String)n.f2.accept(this, argu);
         n.f1.accept(this, argu);
         if(type1 == "int" && type2 == "int")
         {
            String type = "int";
            _ret = (R)type;
         }
         else
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      else
      {
         String type1 = (String)n.f0.accept(this, argu);
         String type2 = (String)n.f2.accept(this, argu);
         n.f1.accept(this, argu);
         n.f3.accept(this, argu);
         if(type1 == "int[]" && type2 == "int")
         {
            String type = "int";
            _ret = (R)type;
         }
         else
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         String type = (String)n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         if(type == "int[]")
         {
            String type1 = "int";
            _ret = (R)type1;
         }
         else
         {
            System.out.println("Type error");
            System.exit(0);
         }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         String class_name = (String)n.f0.accept(this, argu);
         if(class_var.get(class_name) == null)
         {
            System.out.println("Symbol not found");
            System.exit(0);
         }
         n.f1.accept(this, argu);
         String method_name = (String)n.f2.accept(this, argu);
         if(method_var.get(class_name).get(method_name) == null)
         {
            System.out.println("Symbol not found");
            System.exit(0);
         }
         String return_type = method_var.get(class_name).get(method_name).get("return");
         if(debug)
         {
            System.out.println("return type is " + return_type + " in messagesend");
         }
         if(return_type == null)
         {
            String parent_class = extend_mapping.get(class_name);
            while(parent_class != null)
            {
               if(method_var.get(parent_class).get(method_name) != null)
               {
                  return_type = method_var.get(parent_class).get(method_name).get("return");
                  break;
               }
               parent_class = extend_mapping.get(parent_class);
            }
         }
         if(return_type == null)
         {
            System.out.println("Type error");
            System.exit(0);
         }
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);

         Vector<String>type_expr = (Vector<String>)messagesend_arguments.clone();
         messagesend_arguments.clear();
         if(debug)
         {
            System.out.println("argumetns types in messagesend");
            System.out.println(type_expr);
         }

         if(method_arg.get(class_name).get(method_name) == null)
         {
            System.out.println("Symbol not found");
            System.exit(0);
         }

         Vector<String>org_arg = new Vector<>(method_arg.get(class_name).get(method_name).values());

         if(debug)
         {
            System.out.println("argumetns types in method");
            System.out.println(org_arg);
         }

         if(type_expr.size() != org_arg.size())
         {
            System.out.println("Type error");
            System.exit(0);
         }

         for(int i=0;i<org_arg.size();i++)
         {
            if(org_arg.get(i) == "int" || org_arg.get(i) == "int[]" || org_arg.get(i) == "boolean")
            {
               if(org_arg.get(i) != type_expr.get(i))
               {
                  System.out.println("Type error");
                  System.exit(0);
               }
            }
            else
            {
               String sending = type_expr.get(i);
               Vector<String>originals_can_be = new Vector<>();
               originals_can_be.add(org_arg.get(i));
               for (Map.Entry<String, String> entry : extend_mapping.entrySet()) {
                  if (entry.getValue() == org_arg.get(i)) 
                  {
                     originals_can_be.add(entry.getKey());
                  }
              }
               if(!originals_can_be.contains(sending))
               {
                  System.out.println("Type error");
                  System.exit(0);
               }
            }
         }
         
         n.f5.accept(this, argu);
         
         _ret = (R)return_type;
      }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      else
      {
         String expr1 = (String)n.f0.accept(this, argu);
         messagesend_arguments.add(expr1);
         n.f1.accept(this, argu);
         //_ret = (R)expr1;
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         String expr_type = (String)n.f1.accept(this, argu);
         messagesend_arguments.add(expr_type);
      }
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      
      if(Storage)
      {
         n.f0.accept(this, argu);
      }
      else
      {
         String type = (String)n.f0.accept(this, argu);
         //String type = null; //check this statemetnt again type = id_name
         
         Vector<String>class_method = (Vector<String>)argu;

         if(n.f0.which == 3)
         {
            String id_name = type;
            if(class_var.containsKey(class_method.get(0)))
            {
               type = class_var.get(class_method.get(0)).get(id_name);
            }
            if(type == null && method_var.get(class_method.get(0)).containsKey(class_method.get(1)))
            {
               type = method_var.get(class_method.get(0)).get(class_method.get(1)).get(id_name);
            }
            if(type == null && method_arg.get(class_method.get(0)).containsKey(class_method.get(1)))
            {
               type = method_arg.get(class_method.get(0)).get(class_method.get(1)).get(id_name);
            }
            if(type == null)
            {
               String parent_class = extend_mapping.get(class_method.get(0));
               while(parent_class != null)
               {
                  if(class_var.containsKey(parent_class))
                  {
                     if(class_var.get(parent_class).containsKey(id_name))
                     {
                        type = class_var.get(parent_class).get(id_name);
                        break;
                     }
                  }
                  else
                  {
                     System.out.println("Symbol not found");
                     System.exit(0);
                  }
                  parent_class = extend_mapping.get(parent_class);
               }
            } 
            if(type == null)
            {
               type = id_name;
            } 
         }
         _ret = (R)type;
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      
      if(Storage)
      {
         n.f0.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         String type = "int";
         _ret = (R)type;
      }
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         String type = "boolean";
         _ret = (R)type;
      }
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         String type = "boolean";
         _ret = (R)type;
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      
      if(Storage)
      {
        // String type = (String)n.f0.accept(this, argu);
         _ret = (R)n.f0.toString();
      }
      else
      {
         //String type = (String)n.f0.accept(this,argu);
         //_ret = (R)type;
         _ret = (R)n.f0.toString();
      }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         Vector<String>class_method = (Vector<String>)argu;
         String class_name = class_method.get(0);

         if(class_var.get(class_name) == null)
         {
            System.out.println("Symbol not found");
            System.exit(0);
         }
         _ret = (R)class_name;
      }   
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         String type = (String)n.f3.accept(this, argu);
         
         if(type != "int")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         n.f4.accept(this, argu);
         String r_type = "int[]";
         _ret = (R)r_type;
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         
         String class_name = (String)n.f1.accept(this, argu);

         if(!class_var.containsKey(class_name))
         {
            System.out.println("Symbol not found");
            System.exit(0);
         }
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         _ret = (R)class_name;
      }
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         String type = (String)n.f1.accept(this, argu);

         if(type != "boolean")
         {
            System.out.println("Type error");
            System.exit(0);
         }
         _ret = (R)type;
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this,argu);
         n.f1.accept(this,argu);
         n.f2.accept(this,argu);
      }
      else
      {
         n.f0.accept(this, argu);
         String type = (String)n.f1.accept(this,argu);
         n.f2.accept(this, argu);
         _ret = (R)type;
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
