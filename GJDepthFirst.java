//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   boolean is_print = false;
   boolean is_halloc = false;
   boolean is_error = true;

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
      {
         R label = n.node.accept(this,argu);
         if(label != null)
         {
            String label_str = (String)label;
            System.out.println(label_str+":");
         }
         return n.node.accept(this,argu);
      }
      else
      {  
         return null;
      }
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println(".text");
      System.out.println(".globl\t\tmain");
      System.out.println("main:");
      System.out.println("move $fp, $sp");

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      String space = (String)n.f5.accept(this, argu);
      Integer total_space = Integer.parseInt(space)*4+4;
      System.out.println("subu $sp, $sp, "+Integer.toString(total_space));
      System.out.println("sw $ra, -4($fp)");

      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);

      System.out.println("lw $ra, -4($fp)");
      System.out.println("addu $sp, $sp, "+Integer.toString(total_space));
      System.out.println("j $ra");

      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);

      if(is_halloc)
      {
         System.out.println(".text");
         System.out.println(".globl\t\t_halloc");
         System.out.println("_halloc:");
         System.out.println("li $v0, 9");
         System.out.println("syscall");
         System.out.println("jr $ra");
      }

      if(is_print)
      {
         System.out.println(".text");
         System.out.println(".globl\t\t_print");
         System.out.println("_print:");
         System.out.println("li $v0, 1");
         System.out.println("syscall");
         System.out.println("la $a0, newl");
         System.out.println("li $v0, 4");
         System.out.println("syscall");
         System.out.println("jr $ra");
      }

      if(is_error)
      {
         System.out.println(".data");
         System.out.println(".align\t0");
         System.out.println("newl:\t\t.asciiz\t\"\\n\"");
         System.out.println(".data");
         System.out.println(".align\t0");
         System.out.println("str_er:\t\t.asciiz\t\" ERROR: abnormal termination\\n\"");
      }

      n.f14.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String method_name = (String)n.f0.accept(this, argu);
      System.out.println(".text");
      System.out.println(".globl\t\t"+method_name);
      n.f1.accept(this, argu);
      System.out.println(method_name+":");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String space = (String)n.f5.accept(this, argu);
      Integer total_space = Integer.parseInt(space)*4+4;
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);

      // sw $fp, -8($sp)
      // subu $sp, $sp, 4
      // move $fp, $sp
      // subu $sp, $sp, 76
      // sw $ra, 0($fp)
      System.out.println("sw $fp, -8($sp)");
      System.out.println("subu $sp, $sp, 4");
      System.out.println("move $fp, $sp");
      System.out.println("subu $sp, $sp, "+Integer.toString(total_space));
      System.out.println("sw $ra, 0($fp)");

      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      // lw $ra, 0($fp)
      // addu $sp, $sp, 76
      // lw $fp, -4($sp)
      // addu $sp, $sp, 4
      // j $ra
      System.out.println("lw $ra, 0($fp)");
      System.out.println("addu $sp, $sp, "+Integer.toString(total_space));
      System.out.println("lw $fp, -4($sp)");
      System.out.println("addu $sp, $sp, 4");
      System.out.println("j $ra");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String register = (String)n.f1.accept(this, argu);
      String label = (String)n.f2.accept(this, argu);
      System.out.println("beqz "+register+" "+label);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String jump_to = (String)n.f1.accept(this, argu);
      System.out.println("b "+jump_to);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = (String)n.f1.accept(this, argu);
      String offset_str = (String)n.f2.accept(this, argu);
      Integer offset = Integer.parseInt(offset_str);
      String reg2 = (String)n.f3.accept(this, argu);
      System.out.println("sw "+reg2+", "+offset+"("+reg1+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = (String)n.f1.accept(this, argu);
      String reg2 = (String)n.f2.accept(this, argu);
      String offset_str = (String)n.f3.accept(this, argu);
      Integer offset = Integer.parseInt(offset_str);
      System.out.println("lw "+reg1+", "+offset+"("+reg2+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R register = n.f1.accept(this, argu);
      // System.out.println("in move stmt register is : "+register);
      n.f2.accept(this, (A)register);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      is_print = true;
      n.f0.accept(this, argu);
      String exp = (String)n.f1.accept(this, argu);
      if (exp.charAt(0) == '$')
         System.out.println("move $a0, "+exp);
      else
         System.out.println("li $a0, "+exp);
      System.out.println("jal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String register = (String)n.f1.accept(this, argu);
      String offset = (String)n.f2.accept(this, argu);
      System.out.println("lw "+register+", "+offset+"($fp)");
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String offset = (String)n.f1.accept(this, argu);
      String register = (String)n.f2.accept(this, argu);
      System.out.println("sw "+register+", "+offset+"($fp)");
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String integral = (String)n.f1.accept(this, argu);
      Integer offset = Integer.parseInt(integral)*(-4)-8;
      String register = (String)n.f2.accept(this, argu);
      System.out.println("sw "+register+", "+Integer.toString(offset)+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String exp = (String)n.f1.accept(this, argu);
      System.out.println("jalr "+exp);
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;

      if(n.f0.which == 2)
      {
         String store = (String)argu;
         // System.out.println("in exp store is : "+store);
         String exp = (String)n.f0.accept(this, argu);
         if(exp.charAt(0) == '$')
            System.out.println("move "+store+", "+exp);
         else
            if (exp.charAt(0) >= '0' && exp.charAt(0) <= '9')
               System.out.println("li "+store+", "+exp);
            else
               System.out.println("la "+store+", "+exp);
      }
      else
      {
         n.f0.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      is_halloc = true;
      n.f0.accept(this, argu);
      String exp = (String)n.f1.accept(this, argu);
      if(exp.charAt(0) == '$')
         System.out.println("move $a0, "+exp);
      else
         System.out.println("li $a0, "+exp);
      System.out.println("jal _halloc");
      String register = (String)argu;
      System.out.println("move "+register+", $v0");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String operation = (String)n.f0.accept(this, argu);
      String register = (String)n.f1.accept(this, argu);
      String exp = (String)n.f2.accept(this, argu);
      String store = (String)argu;
      if(operation == "LE")
      {
         System.out.println("sle "+store+", "+register+", "+exp);
      }
      else if(operation == "NE")
      {
         System.out.println("sne "+store+", "+register+", "+exp);
      }
      else if(operation == "PLUS")
      {
         System.out.println("add "+store+", "+register+", "+exp);
      }
      else if(operation == "MINUS")
      {
         System.out.println("sub "+store+", "+register+", "+exp);
      }
      else if(operation == "TIMES")
      {
         System.out.println("mul "+store+", "+register+", "+exp);
      }
      else if(operation == "DIV")
      {
         System.out.println("div "+store+", "+register+", "+exp);
      }
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      _ret = (R)n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String integral = (String)n.f1.accept(this, argu);
      Integer offset = Integer.parseInt(integral)*(-4)-8;
      _ret = (R)offset.toString();
      return _ret;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      // System.out.println("in reg");
      String name = (String)n.f0.accept(this, argu);
      // System.out.println("in reg name is : "+name);
      String register = "$"+name;
      // System.out.println("register is : "+register);
      _ret = (R)(register);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      String temp = n.f0.toString();
      _ret = (R)temp;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      String temp = n.f0.toString();
      _ret = (R)temp;
      return _ret;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
