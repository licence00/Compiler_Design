//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   //Struct strcuture for each class and method table is always present in 0th index
   HashMap<String,LinkedHashMap<String,Integer>> class_var = new  HashMap<String,LinkedHashMap<String,Integer>>();
   HashMap<String,LinkedHashMap<String,Integer>> method_names = new HashMap<String,LinkedHashMap<String,Integer>>();
   HashMap<String,HashMap<String,LinkedHashMap<String,Integer>>> method_args = new HashMap<String,HashMap<String,LinkedHashMap<String,Integer>>>();

   HashMap<String,HashMap<String,Integer>> temp_start_value = new HashMap<String,HashMap<String,Integer>>();

   HashMap<String,HashMap<String,LinkedHashMap<String,Integer>>> temp_method_var = new HashMap<String,HashMap<String,LinkedHashMap<String,Integer>>>();

   Vector<Integer>ms_Args = new Vector<Integer>();

   int labels = 0;

   boolean Storage = true;
   boolean debug = true;

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(debug)
      {
         System.out.println("main class done");
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      System.out.println(class_var);

      System.out.println(method_names);

      System.out.println(method_args);

      System.out.println(temp_method_var);

      System.out.println(temp_start_value);

      Storage = false;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);
         n.f14.accept(this, argu);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
      }
      else
      {
         System.out.println("MAIN");
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, argu);
         n.f8.accept(this, argu);
         n.f9.accept(this, argu);
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         n.f13.accept(this, argu);

         String class_name = (String) n.f1.accept(this, argu);
         String method_name = "main";

         HashMap<String,Integer> temp1 = new HashMap<String,Integer>();
         temp_start_value.put(class_name,temp1);

         temp_start_value.get(class_name).put(method_name,1);

         Vector<String>loc = new Vector<String>();
         loc.add(class_name);
         loc.add(method_name);
         n.f14.accept(this, (A)loc);
         n.f15.accept(this, argu);
         n.f16.accept(this, argu);
         System.out.println("END");
      }
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         String class_name = (String) n.f1.accept(this, argu);

         LinkedHashMap<String,Integer> temp = new LinkedHashMap<String,Integer>();
         class_var.put(class_name,temp);

         LinkedHashMap<String,Integer> temp1 = new LinkedHashMap<String,Integer>();
         method_names.put(class_name,temp1);

         HashMap<String,LinkedHashMap<String,Integer>> temp2 = new HashMap<String,LinkedHashMap<String,Integer>>();
         method_args.put(class_name,temp2);

         HashMap<String,LinkedHashMap<String,Integer>> temp3 = new HashMap<String,LinkedHashMap<String,Integer>>();
         temp_method_var.put(class_name,temp3);

         HashMap<String,Integer> temp4 = new HashMap<String,Integer>();
         temp_start_value.put(class_name,temp4);

         Vector<String>loc = new Vector<String>();
         loc.add(class_name);
         loc.add("class");

         n.f2.accept(this, argu);
         n.f3.accept(this, (A)loc);
         // if(debug)
         // {
         //    System.out.println("var dec done in class decalration");
         // }
         n.f4.accept(this, (A)loc);
         // if(debug)
         // {
         //    System.out.println("method dec done in class decalration");
         // }
         n.f5.accept(this, argu);

      }
      else
      {
         n.f0.accept(this, argu);
         String class_name = (String) n.f1.accept(this, argu);
         Vector<String>loc = new Vector<String>();
         loc.add(class_name);
         loc.add("class");
         // if(debug)
         // {
         //    System.out.println(loc + "in class declaraiton");
         // }
         n.f2.accept(this, argu);
         n.f3.accept(this, (A)loc);
         n.f4.accept(this, (A)loc);
         n.f5.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
         Vector<String>loc = (Vector<String>)argu;
         if(loc.get(1) == "class")
         {
            String class_name = loc.get(0);
            String var_name = (String)n.f1.accept(this, argu);
            Integer index = 0;
            Collection<Integer> values = class_var.get(class_name).values();
            for(Integer value : values) 
            {
               index = value;
            }
            class_var.get(class_name).put(var_name,index+4);
         }
         else
         {
            String class_name = loc.get(0);
            String method_name = loc.get(1);
            String var_name = (String)n.f1.accept(this, argu);
            
            Collection<Integer> values = temp_method_var.get(class_name).get(method_name).values();
            
            if(values.size() > 0)
            {
               Integer index = 0;
               for(Integer value : values) 
               {
                  index = value;
               }
               temp_method_var.get(class_name).get(method_name).put(var_name,index+1);
               temp_start_value.get(class_name).put(method_name,index+2);
            }
            else
            {
               temp_method_var.get(class_name).get(method_name).put(var_name,1);
               temp_start_value.get(class_name).put(method_name,2);
            }
         }
         n.f2.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;

      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);

         String class_name = (String) ((Vector<String>)argu).get(0);
         String method_name = (String)n.f2.accept(this, argu);

         LinkedHashMap<String,Integer> temp1 = new LinkedHashMap<String,Integer>();
         method_args.get(class_name).put(method_name,temp1);

         LinkedHashMap<String,Integer> temp2 = new LinkedHashMap<String,Integer>();
         temp_method_var.get(class_name).put(method_name,temp2);

         temp_start_value.get(class_name).put(method_name,0);

         Vector<String>loc = new Vector<String>();
         loc.add(class_name);
         loc.add(method_name);
         if(debug)
         {
            System.out.println(loc + "in method declaraiton");
         }
         n.f3.accept(this, argu);

         n.f4.accept(this, (A)loc);
         if(debug)
         {
            System.out.println("formal param done in method decalration");
         }
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         n.f7.accept(this, (A)loc);
         n.f8.accept(this, (A)loc);
         n.f9.accept(this, argu);
         n.f10.accept(this, (A)loc);

         Collection<Integer> values = method_names.get(class_name).values();
         if(values.size() > 0)
         {
            Integer index = 0;
            for(Integer value : values) 
            {
               index = value;
            }
            method_names.get(class_name).put(method_name,index+4);
         }
         else
         {
            method_names.get(class_name).put(method_name,0);
         }
        
         n.f10.accept(this, argu);
         n.f11.accept(this, argu);
      }
      else
      {
         Vector<String>loc = (Vector<String>)argu;
         String class_name = loc.get(0);
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String method_name = (String)n.f2.accept(this, argu);
         if(debug)
         {
            System.out.println(class_name + " "+method_name + "in method declaraiton");
         }
         int arg_count = method_args.get(class_name).get(method_name).size();
         String print_name = class_name + "_" + method_name;
         System.out.println(print_name + " ["+ (arg_count+1) +"]");
         loc.clear();
         loc.add(class_name);
         loc.add(method_name);

         n.f3.accept(this, argu);
         n.f4.accept(this, (A)loc);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
         System.out.println("BEGIN");

         // if(debug)
         // {
         //    System.out.println(class_var.get(class_name));
         //    System.out.println(method_names.get(class_name));
         //    System.out.println(method_args.get(class_name).get(method_name));
         //    System.out.println(temp_method_var.get(class_name).get(method_name));
         //    System.out.println(temp_start_value.get(class_name).get(method_name));
         // }

         n.f7.accept(this, (A)loc);
         n.f8.accept(this, (A)loc);
         n.f9.accept(this, argu);
         n.f10.accept(this, (A)loc);
         int env_index = temp_start_value.get(class_name).get(method_name);
         System.out.println("RETURN TEMP " + (env_index-1));
         System.out.println("END");
         n.f11.accept(this, argu);
         n.f12.accept(this, argu);
         
      }
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      if(Storage)
      {
         Vector<String>loc = (Vector<String>)argu;
         String class_name = loc.get(0);
         String method_name = loc.get(1);

         n.f0.accept(this, argu);

         String arg_name = (String) n.f1.accept(this, argu);

         Collection<Integer> values = method_args.get(class_name).get(method_name).values();
         // if(debug)
         // {
         //    System.out.println("size of values in formal param is " + values.size());
         //    System.out.println("that is " + method_args.get(class_name).get(method_name));
         // }
         if(values.size() > 0)
         {
            Integer index = 0;
            for(Integer value : values) 
            {
               index = value;
            }
            method_args.get(class_name).get(method_name).put(arg_name,index+1);
            temp_method_var.get(class_name).get(method_name).put(arg_name,index+2);
            temp_start_value.get(class_name).put(method_name,index+3);
         }
         else
         {
            method_args.get(class_name).get(method_name).put(arg_name,0);
            temp_method_var.get(class_name).get(method_name).put(arg_name,1);
            temp_start_value.get(class_name).put(method_name,2);
         }
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | DoStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      else
      {
         Vector<String>loc = (Vector<String>)argu;
         String id = (String)n.f0.accept(this, argu);
         int id_index = -1;
         if(class_var.get(loc.get(0)).containsKey(id))
         {
            int env_index = temp_start_value.get(loc.get(0)).get(loc.get(1));
            int offset = class_var.get(loc.get(0)).get(id);
            System.out.println("MOVE TEMP " + (env_index) + " TEMP 0");
            env_index++;
            System.out.println("HLOAD TEMP " + (env_index) + " "+ " TEMP " + (env_index-1)+" "+offset);
            id_index = env_index;
            env_index++;
            temp_start_value.get(loc.get(0)).put(loc.get(1),env_index);
         }
         else
         {
            if(temp_method_var.get(loc.get(0)).get(loc.get(1)).containsKey(id))
            {
               id_index = temp_method_var.get(loc.get(0)).get(loc.get(1)).get(id);
            }
            else
            {
               System.out.println("EROOR");
               System.exit(0);
            }
         }
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         int env_index = temp_start_value.get(loc.get(0)).get(loc.get(1));
         System.out.println("MOVE TEMP " + (id_index) + " TEMP " + (env_index-1));
         n.f3.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);   
      }
      else
      {
         Vector<String>loc = (Vector<String>)argu;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         int env_index = temp_start_value.get(loc.get(0)).get(loc.get(1));
         System.out.println("CJUMP TEMP " + (env_index-1) + " L" + labels);
         labels++;
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         System.out.println("L" + (labels-1));
         System.out.println("NOOP");
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
         n.f6.accept(this, argu);
      }
      else
      {
         Vector<String>loc = (Vector<String>)argu;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         int env_index = temp_start_value.get(loc.get(0)).get(loc.get(1));
         System.out.println("CJUMP TEMP " + (env_index-1) + " L" + labels);
         labels++;

         n.f3.accept(this, argu);
         n.f4.accept(this, argu);

         System.out.println("JUMP L" + labels);

         labels++;
         System.out.println("L" + (labels-2));
         System.out.println("NOOP");

         n.f5.accept(this, argu);
         n.f6.accept(this, argu);

         System.out.println("L" + (labels-1));
         System.out.println("NOOP");
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      else
      {
         Vector<String>loc = (Vector<String>)argu;
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);

         System.out.println("L" + labels); labels++;
         System.out.println("NOOP");

         n.f2.accept(this, argu);

         int env_index = temp_start_value.get(loc.get(0)).get(loc.get(1));
         System.out.println("CJUMP TEMP " + (env_index-1) + " L" + labels);

         n.f3.accept(this, argu);
         n.f4.accept(this, argu);

         System.out.println("JUMP L" + (labels-1));
         System.out.println("L" + (labels));  
         System.out.println("NOOP");
         labels++;
      }
      return _ret;
   }

   /**
    * f0 -> "do"
    * f1 -> Statement()
    * f2 -> "while"
    * f3 -> "("
    * f4 -> Expression()
    * f5 -> ")"
    * f6 -> ";"
    */
   public R visit(DoStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         Vector<String>loc = (Vector<String>)argu;
         n.f2.accept(this, argu);
         int index = temp_start_value.get(loc.get(0)).get(loc.get(1));
         System.out.println("PRINT TEMP " + (index-1));
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | AddExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         Vector<String>loc = (Vector<String>)argu;
         n.f0.accept(this, argu);
         int index1 = temp_start_value.get(loc.get(0)).get(loc.get(1))-1;
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         int index2 = temp_start_value.get(loc.get(0)).get(loc.get(1));
         System.out.println("MOVE TEMP " + (index2)+ " TIMES TEMP " + index1 + " TEMP " + (index2-1));
         index2++;
         temp_start_value.get(loc.get(0)).put(loc.get(1),index2);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         Vector<String>loc = (Vector<String>)argu;
         n.f0.accept(this, argu);
         int index1 = temp_start_value.get(loc.get(0)).get(loc.get(1))-1;
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         int index2 = temp_start_value.get(loc.get(0)).get(loc.get(1)); //2

         System.out.println("MOVE TEMP " + (index2)+ " PLUS TEMP " + index1 + " TEMP " + (index2-1)); //2 =0+1
         index2++; 

         System.out.println("MOVE TEMP "+ (index2) +" 1"); //3 =1
         index2++;

         System.out.println("MOVE TEMP " + (index2)+ " LE TEMP " + (index2-1) + " TEMP " + (index2-2)); 
         index2++;

         temp_start_value.get(loc.get(0)).put(loc.get(1),index2);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         Vector<String>loc = (Vector<String>)argu;
         n.f0.accept(this, argu);
         int index1 = temp_start_value.get(loc.get(0)).get(loc.get(1))-1;
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         int index2 = temp_start_value.get(loc.get(0)).get(loc.get(1));
         System.out.println("MOVE TEMP " + (index2)+ " LE TEMP " + index1 + " TEMP " + (index2-1));
         index2++;
         temp_start_value.get(loc.get(0)).put(loc.get(1),index2);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         Vector<String>loc = (Vector<String>)argu;
         n.f0.accept(this, argu);
         int index1 = temp_start_value.get(loc.get(0)).get(loc.get(1))-1;
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         int index2 = temp_start_value.get(loc.get(0)).get(loc.get(1));
         System.out.println("MOVE TEMP " + (index2)+ " NE TEMP " + index1 + " TEMP " + (index2-1));
         index2++;
         temp_start_value.get(loc.get(0)).put(loc.get(1),index2);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(AddExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         Vector<String>loc = (Vector<String>)argu;
         n.f0.accept(this, argu);
         int index1 = temp_start_value.get(loc.get(0)).get(loc.get(1))-1;
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         int index2 = temp_start_value.get(loc.get(0)).get(loc.get(1));
         System.out.println("MOVE TEMP " + (index2)+ " PLUS TEMP " + index1 + " TEMP " + (index2-1));
         index2++;
         temp_start_value.get(loc.get(0)).put(loc.get(1),index2);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         Vector<String>loc = (Vector<String>)argu;
         n.f0.accept(this, argu);
         int index1 = temp_start_value.get(loc.get(0)).get(loc.get(1))-1;
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         int index2 = temp_start_value.get(loc.get(0)).get(loc.get(1));
         System.out.println("MOVE TEMP " + (index2)+ " MINUS TEMP " + index1 + " TEMP " + (index2-1));
         index2++;
         temp_start_value.get(loc.get(0)).put(loc.get(1),index2);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         Vector<String>loc = (Vector<String>)argu;
         n.f0.accept(this, argu);
         int index1 = temp_start_value.get(loc.get(0)).get(loc.get(1))-1;
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         int index2 = temp_start_value.get(loc.get(0)).get(loc.get(1));
         System.out.println("MOVE TEMP " + (index2)+ " TIMES TEMP " + index1 + " TEMP " + (index2-1));
         index2++;
         temp_start_value.get(loc.get(0)).put(loc.get(1),index2);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
      }
      else
      {
         Vector<String>loc = (Vector<String>)argu;
         n.f0.accept(this, argu);
         int index1 = temp_start_value.get(loc.get(0)).get(loc.get(1))-1;
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         int index2 = temp_start_value.get(loc.get(0)).get(loc.get(1));
         System.out.println("MOVE TEMP " + (index2)+ " DIV TEMP " + index1 + " TEMP " + (index2-1));
         index2++;
         temp_start_value.get(loc.get(0)).put(loc.get(1),index2);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         n.f5.accept(this, argu);
      }
      else
      {
         Vector<String>loc = (Vector<String>)argu;
         String class_name = (String)n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         String method_name = (String)n.f2.accept(this, argu);
         Integer offset = method_names.get(class_name).get(method_name);
         Integer env_index = temp_start_value.get(loc.get(0)).get(loc.get(1));

         System.out.println("MOVE TEMP "+env_index+" TEMP 0");
         env_index++;

         System.out.println("HLOAD TEMP "+env_index+" TEMP "+(env_index-1)+" 0");
         Integer method_table = env_index;
         env_index++;

         System.out.println("HLOAD TEMP "+env_index+" TEMP "+method_table+" "+offset);
         Integer function_index = env_index;
         env_index++;

         temp_start_value.get(loc.get(0)).put(loc.get(1),env_index);
         n.f3.accept(this, argu);
         n.f4.accept(this, argu);
         
         env_index = temp_start_value.get(loc.get(0)).get(loc.get(1)); 
         System.out.print("MOVE TEMP "+env_index+" CALL TEMP "+function_index+" ( TEMP 0 ");
         for(Integer i : ms_Args)
         {
            System.out.print(" TEMP "+i);
         }
         System.out.println(" )");
         ms_Args.clear();
         env_index++;
         temp_start_value.get(loc.get(0)).put(loc.get(1),env_index);
         n.f5.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         Vector<String>loc = (Vector<String>)argu;
         Integer env_index = temp_start_value.get(loc.get(0)).get(loc.get(1))-1;
         ms_Args.add(env_index);
         n.f1.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         Vector<String>loc = (Vector<String>)argu;
         Integer env_index = temp_start_value.get(loc.get(0)).get(loc.get(1))-1;
         ms_Args.add(env_index); 
      }
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
      }
      else
      {
         if(n.f0.which == 3)
         {
            String id = (String)n.f0.accept(this, argu);
            Vector<String>loc = (Vector<String>)argu;
            // if(class_var.get(class_name).containsKey(id))
            // {
            //    Integer class_var_index = class_var.get(class_name).get(id);
            //    Integer env_index = temp_start_value.get(class_name).get(method_name);
            //    System.out.println("HLOAD TEMP "+env_index+" TEMP 0 "+class_var_index);
            //    temp_method_var.get(class_name).get(method_name).put(id,env_index);
            //    env_index++;
            //    temp_start_value.get(class_name).put(method_name,env_index);
            // }
            if(temp_method_var.get(loc.get(0)).get(loc.get(1)).containsKey(id))
            {
               int temp_index = temp_method_var.get(loc.get(0)).get(loc.get(1)).get(id);
               int env_index = temp_start_value.get(loc.get(0)).get(loc.get(1));
               System.out.println("MOVE TEMP "+env_index+" TEMP "+temp_index);
               env_index++;
               temp_start_value.get(loc.get(0)).put(loc.get(1),env_index);
            }
         }
         _ret = (R)n.f0.accept(this, argu);
      }

      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
      }
      else
      {
         String number = n.f0.toString();
         Vector<String>loc = (Vector<String>)argu;
         Integer index = temp_start_value.get(loc.get(0)).get(loc.get(1));
         System.out.println("MOVE TEMP "+index+" "+number);
         index++;
         temp_start_value.get(loc.get(0)).put(loc.get(1),index);
      }
      return _ret;
   }  

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
      }
      else
      {
         String number = "1";
         String class_name = ((Vector<String>)argu).get(0);
         String method_name = ((Vector<String>)argu).get(1);
         Integer index = temp_start_value.get(class_name).get(method_name);
         System.out.println("MOVE TEMP "+index+" "+number);
         index++;
         temp_start_value.get(class_name).put(method_name,index);
      }
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
      }
      else
      {
         String number = "0";
         String class_name = ((Vector<String>)argu).get(0);
         String method_name = ((Vector<String>)argu).get(1);
         Integer index = temp_start_value.get(class_name).get(method_name);
         System.out.println("MOVE TEMP "+index+" "+number);
         index++;
         temp_start_value.get(class_name).put(method_name,index);
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      //n.f0.accept(this, argu);
       _ret = (R)n.f0.toString();  
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
      }
      else
      {
         Vector<String>loc = (Vector<String>)argu;
         int env_index = temp_start_value.get(loc.get(0)).get(loc.get(1));
         System.out.println("MOVE TEMP "+env_index+" TEMP 0");
         env_index++;
         temp_start_value.get(loc.get(0)).put(loc.get(1),env_index);
         _ret = (R)loc.get(0);
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);
         n.f3.accept(this, argu);
      }
      else
      {
         Vector<String>loc = (Vector<String>)argu;
         // if(debug)
         // {
         //    System.out.println(loc + "in allocation expression");
         // }
         String class_name = (String)n.f1.accept(this, argu);
         Integer env_index = temp_start_value.get(loc.get(0)).get(loc.get(1));
         System.out.println("MOVE TEMP "+env_index+" "+(class_var.get(class_name).size()+1)*4);
         System.out.println("MOVE TEMP "+(env_index+1)+" HALLOCATE TEMP "+env_index);
         int struct_address = env_index+1;
         env_index=env_index+2;
         System.out.println("MOVE TEMP "+env_index+" "+method_names.get(class_name).size()*4);
         System.out.println("MOVE TEMP "+(env_index+1)+" HALLOCATE TEMP "+env_index);
         int method_table_address = env_index+1;
         env_index=env_index+2;
         
         //method declaration in class
         if(method_names.get(class_name).size() > 0)
         {
            for (Map.Entry<String, Integer> entry : method_names.get(class_name).entrySet()) 
            {
               String method_name = entry.getKey();
               String offset = entry.getValue().toString();
               String storing = class_name+"_"+method_name;
               System.out.println("MOVE TEMP "+env_index+" "+storing);
               System.out.println("HSTORE TEMP "+method_table_address+" "+offset+" TEMP "+env_index);
               env_index++;
            }
         }

         //VAR DECLARATION IN CLASS
         if(class_var.get(class_name).size() > 0)
         {
            for(Map.Entry<String,Integer> entry : class_var.get(class_name).entrySet())
            {
               String var_name = entry.getKey();
               String offset = entry.getValue().toString();
               String storing = var_name;
               System.out.println("MOVE TEMP "+env_index+" 0");
               System.out.println("HSTORE TEMP "+struct_address+" "+ offset+" TEMP "+env_index);
               env_index++;
            }
         }

         System.out.println("HSTORE TEMP "+struct_address+" 0 TEMP "+method_table_address);
         System.out.println("MOVE TEMP 0 TEMP "+struct_address);

         temp_start_value.get(loc.get(0)).put(loc.get(1),env_index);

         _ret = (R)class_name;
      }
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      if(Storage)
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu);   
      }
      else
      {
         n.f0.accept(this, argu);
         n.f1.accept(this, argu);
         n.f2.accept(this, argu); 
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
